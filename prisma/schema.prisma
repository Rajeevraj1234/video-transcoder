datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String                      @id @default(cuid())
  name                      String?
  email                     String                      @unique
  emailVerified             DateTime?
  image                     String?
  accounts                  Account[]
  sessions                  Session[]
  // Optional for WebAuthn support
  Authenticator             Authenticator[]
  Transcoded_video_metadata Transcoded_video_metadata[]
  Video_metadata            Video_metadata[]
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Video_metadata {
  id                        String                      @id @default(cuid())
  userId                    String
  user                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  originalName              String
  updatedName               String
  url                       String
  videoType                 videoType
  createdAt                 DateTime
  Transcoded_video_metadata Transcoded_video_metadata[]
}

model Transcoded_video_metadata {
  id             String         @id @default(cuid())
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId        String
  Video_metadata Video_metadata @relation(fields: [videoId], references: [id], onDelete: Cascade)
  url360         String
  url480         String
  url720         String
  videoType      videoType
  createdAt      DateTime
}

enum videoType {
  NORMAL
  TRANSCODED
  SUBTITLED
  TRANSCODED_AND_SUBTITLED
}
